// automatically generated by Xtext
grammar eu.netide.parameters.language.NetIDEParameters with org.eclipse.xtext.common.Terminals

//import "platform:/resource/eu.netide.parameters/parameters.ecore"
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sysReq "http://www.netide.eu/Parameters"


ParameterSchema returns ParameterSchema:
	{ParameterSchema}
	'types' ':' '{'
		(types+=Type ("," types+=Type)*)?
	'}' ','
	'parameters' ':' '{'
		(parameters+=Keyval ("," parameters+=Keyval)*)?
	'}';

Keyval:
	name=ID ':' type=([Type] | AtomicType | ListType | Enum);

Type:
	AtomicType | BasicType | CompositeType | ListType;
	
ListType:
	'List' '(' type=[Type] ')'
;

Enum:
	'[' values += STRING (',' values+=STRING)*  ']'
;

BasicType returns BasicType:
	{BasicType}
	name=ID ':' atomictype=(AtomicType | Enum)
	('[' constraints+=Constraint (',' constraints+=Constraint)* ']')?;

CompositeType returns CompositeType:
	{CompositeType}
	name=ID ':'
	'{'
		innertypes+=Keyval ("," innertypes+=Keyval)*
	'}';

//EString returns ecore::EString:
//	STRING | ID;

Constraint returns Constraint:
	{Constraint}
	STRING;
	
AtomicType returns AtomicType:
	{AtomicType}
	name = ("String" | "Integer" | "Boolean" | "Float")
;

