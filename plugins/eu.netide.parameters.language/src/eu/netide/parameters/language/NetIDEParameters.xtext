// automatically generated by Xtext
grammar eu.netide.parameters.language.NetIDEParameters with org.eclipse.xtext.common.Terminals

//import "platform:/resource/eu.netide.parameters/parameters.ecore"
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate paramschema "http://www.netide.eu/Parameters"


ParameterSchema returns ParameterSchema:
	{ParameterSchema}
	('types' ':' '{'
		typespec = Typespec
	'}' ',')?
	'parameters' ':' '{'
		paramspec = Paramspec
	'}';

Typespec:
	{Typespec}
	(types+=NewType ("," types+=NewType)*)?
;

Paramspec:
	{Paramspec}
	(parameters+=Keyval ("," parameters+=Keyval)*)?
;

NewType:
	BasicType | CompositeType
;

Keyval:
	name=ID ':' type=(TypeReference | Type) ('=' defaultValue=DefaultValue)?;

DefaultValue:
	STRING | "true" | "false" | INT 
;
	
TypeReference:
	type=[Type]
;

Type:
	AtomicType | BasicType | CompositeType | ListType;
	
ListType:
	'List' '(' type=[Type] ')'
;

Enum:
	'[' values += STRING (',' values+=STRING)*  ']'
;

BasicType returns BasicType:
	{BasicType}
	name=ID ':' atomictype=(AtomicType | Enum)
	('[' constraints+=Constraint (',' constraints+=Constraint)* ']')?;

CompositeType returns CompositeType:
	{CompositeType}
	name=ID ':'
	'{'
		innertypes+=Keyval ("," innertypes+=Keyval)*
	'}';

Constraint:
	STRING;
	
AtomicType:
	name = ("String" | "Integer" | "Boolean" | "Float")
;

